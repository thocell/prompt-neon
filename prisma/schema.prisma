// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Additional fields for prompt platform
  points        Int       @default(0)
  totalEarned   Int       @default(0)
  totalSpent    Int       @default(0)
  role          UserRole  @default(USER)
  
  accounts      Account[]
  sessions      Session[]
  prompts       Prompt[]
  likes         Like[]
  downloads     Download[]
  pointTransactions PointTransaction[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Prompt-related models
model Prompt {
  id          String     @id @default(cuid())
  title       String
  description String?
  content     String     @db.Text
  category    String
  tags        String[]
  isPremium   Boolean    @default(false)
  pricePoints Int        @default(0)
  
  // Metrics
  viewCount     Int @default(0)
  likeCount     Int @default(0)
  downloadCount Int @default(0)
  
  // Relationships
  authorId    String
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes       Like[]
  downloads   Download[]
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@index([category])
  @@index([isPremium])
  @@index([createdAt])
}

model Like {
  id       String @id @default(cuid())
  userId   String
  promptId String
  
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt   Prompt @relation(fields: [promptId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@unique([userId, promptId])
}

model Download {
  id       String @id @default(cuid())
  userId   String
  promptId String
  
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt   Prompt @relation(fields: [promptId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
}

model PointTransaction {
  id          String            @id @default(cuid())
  userId      String
  amount      Int
  type        TransactionType
  description String?
  reference   String?
  
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime         @default(now())
}

// Enums
enum UserRole {
  USER
  PREMIUM
  MODERATOR
  ADMIN
}

enum TransactionType {
  EARNED
  SPENT
  REFUNDED
  BONUS
  PURCHASE
}